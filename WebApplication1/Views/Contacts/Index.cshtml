@using WebApplication1.Entities;
@using X.PagedList;
@using X.PagedList.Mvc.Core;
@using X.PagedList.Web.Common

@model IEnumerable<Contact>

<div class="row" enctype="multipart/form-data">


    <div class="row">
        <div class="col-md-2 show-border">
            <a asp-action="Create" asp-controller="Contacts" class="btn btn-success">
                Create
            </a>
        </div>
        <div class="col-md-10 show-border">
            <form asp-controller="Contacts" asp-action="Index" method="get" class="my-2 mx-2">
                <div class="input-group">
                    <select class="form-select" id="inputSearch" name="searchBy">
                        <option selected value="">Search by...</option>
                        <option value="name">Name</option>
                        <option value="email">Email</option>
                        <option value="phone">Phone</option>
                        <option value="birthDate">Birth Date</option>
                        <option value="category">Category</option>
                    </select>
                    <input name="searchFor" class="form-control" id="inputSearch" aria-describedby="inputSearchComment" aria-label="Search">
                    <button class="btn btn-outline-secondary" type="submit" id="inputSearch">Search</button>
                    <a class="btn btn-outline-primary" type="button" asp-controller="Contacts" asp-action="index">Clear Search</a>
                </div>
            </form>
        </div> 
    </div>
        

    <div class="col-md-12">
        <table class="table">
            <thead>
                <tr>
                    <td>Manage</td>
                    @* <td>Id</td> *@
                    @* <td>First Name</td> *@
                    @{
                        var sortBy = Context.Request.Query["sortBy"] == "firstName" ? "firstNameDesc" : "firstName";
                    }
                    <th>
                        <a asp-action="index" asp-route-sortby="@sortBy"
                           asp-route-page="@Context.Request.Query["page"]"
                           asp-route-searchby="@Context.Request.Query["searchBy"]"
                           asp-route-searchfor="@Context.Request.Query["searchFor"]">First Name
                       </a>
                    </th>
                   
                    @*  <td>Last Name</td> *@
                    @{
                        sortBy = Context.Request.Query["sortBy"] == "lastName" ? "lastNameDesc" : "lastName";
                    }
                    <th>
                        <a asp-action="index" asp-route-sortby="@sortBy"
                           asp-route-page="@Context.Request.Query["page"]"
                           asp-route-searchby="@Context.Request.Query["searchBy"]"
                           asp-route-searchfor="@Context.Request.Query["searchFor"]">Last Name
                       </a>
                    </th>
                    <th>Photo</th>
                    <th>Birth Date</th>
                    <td>Email</td>
                    <td>Phone</td>
                    <td>UnDel</td>
                    <td>Priority</td>
                    <td>Category</td>
                    <td>Info</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in @Model)
                {
                    <tr>
                        <td>
                            <a asp-action="Edit" asp-controller="Contacts" class="btn btn-warning" asp-route-id="@item.Id">
                                Edit
                            </a>
                            <a asp-action="Delete" asp-controller="Contacts" class="btn btn-danger" asp-route-id="@item.Id">
                                Delete
                            </a>
                        </td>
                        @* <td>@item.Id</td> *@
                        <td>@item.FirstName</td>
                        <td>@item.LastName</td>
                        <td>
                            @* @{
                                string imagePath = "~/img/" + @item.PhotoPath;
                            }
                            <img src="@imagePath" class="img-thumbnail" height="40" width="40" asp-append-version="true" /> *@

                            @if (@item.PhotoPath != null)
                            {
                                string imagePath = "~/img/" + item.PhotoPath;

                                <img src="@imagePath" class="img-thumbnail" height="40" width="40" asp-append-version="true" />
                            }
                        @*     else
                            {
                                <p>no photo</p>
                            } *@
                        </td>
                        <td>@item.BirthDate</td>
                        <td>@item.Email</td>
                        <td>@item.Mobile</td>
                        <td>@if (@item.UnDeleteAble == true){<p> yes </p>}</td>
                        <td>@item.PriorityType</td>
                        <td>@item.Category?.CategoryName</td>
                        <td>
                            <a asp-action="Details" asp-controller="Contacts" class="btn btn-primary" asp-route-id="@item.Id">
                                View
                            </a>
                        </td>
                    </tr>
                }

            </tbody>
        </table>

        <div class="row">
            @Html.PagedListPager((IPagedList)Model, page => Url.Action("Index", new
                {
                    page = page,
                    searchfor = @Context.Request.Query["searchFor"],
                    searchby = @Context.Request.Query["searchBy"],
                    sortby = @Context.Request.Query["sortBy"]
                }),
                     new X.PagedList.Web.Common.PagedListRenderOptions
            {
                LiElementClasses = new string[] { "page-item" },
                PageClasses = new string[] { "page-link" },

                DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToLastPage = PagedListDisplayMode.Always,
                LinkToFirstPageFormat = "1",
                MaximumPageNumbersToDisplay = 5,
                ContainerDivClasses = new string[] { "pagination" }
               
            })
        </div>
    </div>
</div> 

